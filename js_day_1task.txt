1) Write a blog on Difference between HTTP1.1 vs HTTP2?
        HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, 
    it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a 
    single TCP connection to send multiple streams of data at once so that no one 
    resource blocks any other resource.
    HEADER COMPRESSION:
        Small files load more quickly than large ones. To speed up web performance, both 
    HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller. However, HTTP/2 
    uses a more advanced compression method called HPACK that eliminates redundant
    information in HTTP header packets. This eliminates a few bytes from every HTTP 
    packet. Given the volume of HTTP packets involved in loading even a single 
    webpage, those bytes add up quickly, resulting in faster loading.
    PRIORITIZATION: 
        In HTTP/2, developers have hands-on, detailed control over prioritization. This 
    allows them to maximize perceived and actual page load speed to a degree that 
    was not possible in HTTP/1.1.
        HTTP/2 offers a feature called weighted prioritization. This allows developers
    to decide which page resources will load first, every time. In HTTP/2, when a
    client makes a request for a webpage, the server sends several streams of 
    data to the client at once, instead of sending one thing after another. This
    method of data delivery is known as multiplexing. Developers can assign
    each of these data streams a different weighted value, and the value tells 
    the client which data stream to render first.

2) Write a blog about objects and its internal representation in Javascript?
        Objects, in JavaScript, is it’s most important data-type and forms the building 
    blocks for modern JavaScript. These objects are quite different from JavaScript’s
    primitive data-types(Number, String, Boolean, null, undefined and symbol) in 
    the sense that while these primitive data-types all store a single value each
    (depending on their types).
        Objects in JavaScript may be defined as an unordered collection of related data,
    of primitive or reference types, in the form of “key: value” pairs. These keys 
    can be variables or functions and are called properties and methods, respectively,
    in the context of an object.
        A JavaScript object has properties associated with it. A property of an object can
    be explained as a variable that is attached to the object. Object properties are
    basically the same as ordinary JavaScript variables, except for the attachment 
    to objects. The properties of an object define the characteristics of the object.
